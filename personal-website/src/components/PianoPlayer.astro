---
// Types and constants defined in frontmatter for better organization
interface SongNote {
    note: string;
    duration: number;
}

interface RecordedNote {
    note: string | null;
    freq: number;
    time: number;
}

// Note frequency lookup table
const NOTE_FREQUENCIES: Record<string, number> = {
    // Lower octave
    C3: 130.81,
    "C#3": 138.59,
    D3: 146.83,
    "D#3": 155.56,
    E3: 164.81,
    F3: 174.61,
    "F#3": 185.0,
    G3: 196.0,
    "G#3": 207.65,
    A3: 220.0,
    "A#3": 233.08,
    B3: 246.94,

    // Middle octave
    C4: 261.63,
    "C#4": 277.18,
    D4: 293.66,
    "D#4": 311.13,
    E4: 329.63,
    F4: 349.23,
    "F#4": 369.99,
    G4: 392.0,
    "G#4": 415.3,
    A4: 440.0,
    "A#4": 466.16,
    B4: 493.88,

    // Upper octave
    C5: 523.25,
    "C#5": 554.37,
    D5: 587.33,
    "D#5": 622.25,
    E5: 659.25,
    F5: 698.46,
    "F#5": 739.99,
    G5: 783.99,
    "G#5": 830.61,
    A5: 880.0,
    "A#5": 932.33,
    B5: 987.77,
};

// Helper function to calculate note frequency
function getFrequency(note: string) {
    return NOTE_FREQUENCIES[note] || 0;
}

const songs: Record<string, SongNote[]> = {
    "fur-elise": [
        { note: "E5", duration: 0.2 },
        { note: "D#5", duration: 0.2 },
        { note: "E5", duration: 0.2 },
        { note: "D#5", duration: 0.2 },
        { note: "E5", duration: 0.2 },
        { note: "B4", duration: 0.2 },
        { note: "D5", duration: 0.2 },
        { note: "C5", duration: 0.2 },
        { note: "A4", duration: 0.4 },
    ],
    "moonlight-sonata": [
        { note: "C#3", duration: 0.5 },
        { note: "G#3", duration: 0.5 },
        { note: "C#4", duration: 0.5 },
        { note: "G#3", duration: 0.5 },
        { note: "C#4", duration: 0.5 },
        { note: "G#3", duration: 0.5 },
    ],
};

const chords = {
    C: ["C4", "E4", "G4"],
    G: ["G4", "B4", "D5"],
    Am: ["A4", "C5", "E5"],
};
---

<div class="piano-container">
    <h2>My Piano Skills</h2>

    <!-- Piano Keyboard -->
    <div class="piano">
        <div class="keyboard">
            <!-- White keys -->
            {
                [
                    "A3",
                    "B3",
                    "C4",
                    "D4",
                    "E4",
                    "F4",
                    "G4",
                    "A4",
                    "B4",
                    "C5",
                    "D5",
                    "E5",
                ].map((note) => (
                    <div
                        class="white-key piano-key"
                        data-note={note}
                        data-freq={NOTE_FREQUENCIES[note] || 0}
                    />
                ))
            }

            <!-- Black keys with dynamic positioning across full range -->
            {
                [
                    { note: "A#3", index: 0 },

                    { note: "C#4", index: 2 },
                    { note: "D#4", index: 3 },
                    { note: "F#4", index: 5 },
                    { note: "G#4", index: 6 },
                    { note: "A#4", index: 7 },

                    { note: "C#5", index: 9 },
                    { note: "D#5", index: 10 },
                ].map(({ note, index }) => (
                    <div
                        class="black-key piano-key"
                        data-note={note}
                        data-freq={NOTE_FREQUENCIES[note] || 0}
                        style={`left: calc(${index} * 50px + 35px);`}
                    />
                ))
            }
        </div>
    </div>

    <!-- Control Panels -->
    <div class="control-section">
        <!-- Demo Songs -->
        <div class="piano-controls">
            <button class="demo-button" data-song="fur-elise"
                >Play FÃ¼r Elise</button
            >
            <button class="demo-button" data-song="moonlight-sonata"
                >Play Moonlight Sonata</button
            >
        </div>

        <!-- Recording Controls -->
        <div class="recording-controls">
            <button id="record-button">Record</button>
            <button id="play-recording" disabled>Play Recording</button>
        </div>

        <!-- Sound Effects -->
        <div class="sound-controls">
            <label for="reverb-level">Reverb:</label>
            <input
                type="range"
                id="reverb-level"
                min="0"
                max="1"
                step="0.1"
                value="0.2"
            />

            <label for="instrument-select" class="ml-3">Instrument:</label>
            <select id="instrument-select">
                <option value="sine">Piano</option>
                <option value="square">Organ</option>
                <option value="sawtooth">Synth</option>
                <option value="triangle">Music Box</option>
            </select>
        </div>

        <!-- Learning Section -->
        <div class="learning-controls">
            <button class="chord-button" data-chord="C">C Major</button>
            <button class="chord-button" data-chord="G">G Major</button>
            <button class="chord-button" data-chord="Am">A Minor</button>
        </div>
    </div>
</div>

<script>
    // Type definitions
    type OscillatorType = "sine" | "square" | "sawtooth" | "triangle";

    interface AudioSystem {
        audioContext: AudioContext;
        convolverNode: ConvolverNode | null;
    }

    interface RecordingSystem {
        isRecording: boolean;
        recordedNotes: Array<{
            note: string | null;
            freq: number;
            time: number;
        }>;
        startTime: number;
    }

    interface SongNote {
        note: string;
        duration: number;
    }

    interface SongList {
        [key: string]: SongNote[];
    }

    // Note frequency lookup table
    const NOTE_FREQUENCIES: Record<string, number> = {
        // Lower octave
        C3: 130.81,
        "C#3": 138.59,
        D3: 146.83,
        "D#3": 155.56,
        E3: 164.81,
        F3: 174.61,
        "F#3": 185.0,
        G3: 196.0,
        "G#3": 207.65,
        A3: 220.0,
        "A#3": 233.08,
        B3: 246.94,

        // Middle octave
        C4: 261.63,
        "C#4": 277.18,
        D4: 293.66,
        "D#4": 311.13,
        E4: 329.63,
        F4: 349.23,
        "F#4": 369.99,
        G4: 392.0,
        "G#4": 415.3,
        A4: 440.0,
        "A#4": 466.16,
        B4: 493.88,

        // Upper octave
        C5: 523.25,
        "C#5": 554.37,
        D5: 587.33,
        "D#5": 622.25,
        E5: 659.25,
        F5: 698.46,
        "F#5": 739.99,
        G5: 783.99,
        "G#5": 830.61,
        A5: 880.0,
        "A#5": 932.33,
        B5: 987.77,
    };

    document.addEventListener("DOMContentLoaded", () => {
        // Audio system initialization
        const audioSystem = initializeAudioSystem();
        if (!audioSystem) return;

        const { audioContext, convolverNode } = audioSystem;
        let reverbLevel = 0.2;
        let currentWaveform: OscillatorType = "sine";

        // Recording system state
        const recordingSystem: RecordingSystem = {
            isRecording: false,
            recordedNotes: [],
            startTime: 0,
        };

        // Initialize UI controls
        initializeControls(audioContext, convolverNode, recordingSystem);

        // Initialize piano key handlers
        initializePianoKeys(audioContext, convolverNode, recordingSystem);

        // Add keyboard controls
        initializeKeyboardControls();

        // Main function to play a note
        function playNote(noteName: string | null, frequency: number): void {
            if (!noteName || !audioContext) return;

            // Visual feedback
            const key = document.querySelector(`[data-note="${noteName}"]`);
            if (!key) return;

            // Highlight key
            key.classList.add("active");
            setTimeout(() => key.classList.remove("active"), 300);

            // Audio processing
            playSound(audioContext, convolverNode, frequency);

            // Record if recording is active
            if (recordingSystem.isRecording) {
                recordingSystem.recordedNotes.push({
                    note: noteName,
                    freq: frequency,
                    time: (Date.now() - recordingSystem.startTime) / 1000,
                });
            }
        }

        // Sound generation function
        function playSound(
            audioContext: AudioContext,
            convolverNode: ConvolverNode | null,
            frequency: number,
        ): void {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.type = currentWaveform;
            oscillator.frequency.value = frequency;

            gainNode.gain.setValueAtTime(0.7, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(
                0.001,
                audioContext.currentTime + 0.8,
            );

            // Apply reverb if available
            if (convolverNode) {
                const dryGainNode = audioContext.createGain();
                const wetGainNode = audioContext.createGain();

                dryGainNode.gain.value = 1 - reverbLevel;
                wetGainNode.gain.value = reverbLevel;

                oscillator.connect(gainNode);
                gainNode.connect(dryGainNode);
                gainNode.connect(convolverNode);
                convolverNode.connect(wetGainNode);

                dryGainNode.connect(audioContext.destination);
                wetGainNode.connect(audioContext.destination);
            } else {
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
            }

            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.8);
        }

        // Initialize audio system
        function initializeAudioSystem(): AudioSystem | null {
            try {
                const audioContext = new (window.AudioContext ||
                    ((window as any)
                        .webkitAudioContext as typeof AudioContext))();
                const convolverNode = initializeReverb(audioContext);
                return { audioContext, convolverNode };
            } catch (e) {
                console.error("Web Audio API is not supported in this browser");
                return null;
            }
        }

        // Initialize reverb
        function initializeReverb(
            audioContext: AudioContext,
        ): ConvolverNode | null {
            if (!audioContext) return null;

            const convolverNode = audioContext.createConvolver();

            // Create impulse response
            const impulseLength = 2 * audioContext.sampleRate;
            const impulse = audioContext.createBuffer(
                2,
                impulseLength,
                audioContext.sampleRate,
            );

            for (let channel = 0; channel < 2; channel++) {
                const impulseData = impulse.getChannelData(channel);
                for (let i = 0; i < impulseLength; i++) {
                    impulseData[i] =
                        (Math.random() * 2 - 1) *
                        Math.pow(1 - i / impulseLength, 2);
                }
            }

            convolverNode.buffer = impulse;
            return convolverNode;
        }

        // Initialize UI controls
        function initializeControls(
            audioContext: AudioContext,
            convolverNode: ConvolverNode | null,
            recordingSystem: RecordingSystem,
        ): void {
            // Reverb control
            const reverbControl = document.getElementById("reverb-level");
            if (reverbControl) {
                reverbControl.addEventListener("input", (e) => {
                    const target = e.target as HTMLInputElement;
                    reverbLevel = parseFloat(target.value);
                });
            }

            // Instrument selection
            const instrumentSelect =
                document.getElementById("instrument-select");
            if (instrumentSelect) {
                instrumentSelect.addEventListener("change", (e) => {
                    const target = e.target as HTMLSelectElement;
                    currentWaveform = target.value as OscillatorType;
                });
            }

            // Demo song buttons
            document.querySelectorAll(".demo-button").forEach((button) => {
                button.addEventListener("click", () => {
                    const songName = button.getAttribute("data-song");
                    if (songName) {
                        playSong(songName);
                    }
                });
            });

            // Recording controls
            initializeRecordingControls(recordingSystem);

            // Chord buttons
            initializeChordButtons();
        }

        // Play a song from the repertoire
        function playSong(songName: string): void {
            if (!songName || !audioContext) return;

            const songs: SongList = {
                "fur-elise": [
                    { note: "E5", duration: 0.2 },
                    { note: "D#5", duration: 0.2 },
                    { note: "E5", duration: 0.2 },
                    { note: "D#5", duration: 0.2 },
                    { note: "E5", duration: 0.2 },
                    { note: "B4", duration: 0.2 },
                    { note: "D5", duration: 0.2 },
                    { note: "C5", duration: 0.2 },
                    { note: "A4", duration: 0.4 },
                ],
                "moonlight-sonata": [
                    { note: "C#3", duration: 0.5 },
                    { note: "G#3", duration: 0.5 },
                    { note: "C#4", duration: 0.5 },
                    { note: "G#3", duration: 0.5 },
                    { note: "C#4", duration: 0.5 },
                    { note: "G#3", duration: 0.5 },
                ],
            };

            if (songs[songName]) {
                let time = 0;
                songs[songName].forEach((note) => {
                    setTimeout(() => {
                        const freq = NOTE_FREQUENCIES[note.note] || 0;
                        playNote(note.note, freq);
                    }, time * 1000);
                    time += note.duration;
                });
            }
        }

        // Initialize piano key handlers
        function initializePianoKeys(
            audioContext: AudioContext,
            convolverNode: ConvolverNode | null,
            recordingSystem: RecordingSystem,
        ): void {
            const allKeys = document.querySelectorAll(".white-key, .black-key");
            allKeys.forEach((key) => {
                key.addEventListener("click", (e) => {
                    const target = e.currentTarget as HTMLElement;
                    const noteName = target.getAttribute("data-note");
                    const frequency = parseFloat(
                        target.getAttribute("data-freq") || "0",
                    );
                    playNote(noteName, frequency);
                });
            });
        }

        // Initialize recording controls
        function initializeRecordingControls(
            recordingSystem: RecordingSystem,
        ): void {
            const recordButton = document.getElementById("record-button");
            const playRecordingButton = document.getElementById(
                "play-recording",
            ) as HTMLButtonElement;

            if (recordButton) {
                recordButton.addEventListener("click", () => {
                    if (!recordingSystem.isRecording) {
                        // Start recording
                        recordingSystem.recordedNotes = [];
                        recordingSystem.startTime = Date.now();
                        recordingSystem.isRecording = true;
                        recordButton.textContent = "Stop Recording";
                        recordButton.classList.add("recording");
                    } else {
                        // Stop recording
                        recordingSystem.isRecording = false;
                        recordButton.textContent = "Record";
                        recordButton.classList.remove("recording");
                        if (playRecordingButton) {
                            playRecordingButton.disabled = false;
                        }
                    }
                });
            }

            if (playRecordingButton) {
                playRecordingButton.addEventListener("click", () => {
                    recordingSystem.recordedNotes.forEach((note) => {
                        setTimeout(() => {
                            playNote(note.note, note.freq);
                        }, note.time * 1000);
                    });
                });
            }
        }

        // Initialize chord buttons
        function initializeChordButtons(): void {
            const chords: Record<string, string[]> = {
                C: ["C4", "E4", "G4"],
                G: ["G4", "B4", "D5"],
                Am: ["A4", "C5", "E5"],
            };

            document.querySelectorAll(".chord-button").forEach((button) => {
                button.addEventListener("click", () => {
                    // Clear any existing highlighted keys
                    document.querySelectorAll(".piano-key").forEach((key) => {
                        key.classList.remove("highlight");
                    });

                    // Get chord name and highlight keys
                    const chordName = button.getAttribute("data-chord");
                    if (chordName && chords[chordName]) {
                        chords[chordName].forEach((note) => {
                            const key = document.querySelector(
                                `.piano-key[data-note="${note}"]`,
                            );
                            if (key) {
                                key.classList.add("highlight");
                            }
                        });
                    }
                });
            });
        }

        // Add keyboard controls
        function initializeKeyboardControls(): void {
            // Expanded keyboard mapping - more white keys across the keyboard
            const keyboardMap: Record<string, string> = {
                // White keys - top to bottom across full keyboard
                q: "A3",
                w: "B3",
                e: "C4",
                r: "D4",
                t: "E4",
                y: "F4",
                u: "G4",
                i: "A4",
                o: "B4",
                p: "C5",
                "[": "D5",
                "]": "E5",
                "\\": "F5",

                // Black keys - using corresponding keys above white keys
                "2": "A#3",
                "3": "C#4",
                "4": "D#4",
                "6": "F#4",
                "7": "G#4",
                "8": "A#4",
                "0": "C#5",
                "-": "D#5",
            };

            // Track currently pressed keys to prevent repeats
            const keysPressed: Record<string, boolean> = {};

            // Listen for key down events
            document.addEventListener("keydown", (event) => {
                const key = event.key.toLowerCase();

                // Only trigger if the key is in our map and not already pressed
                if (keyboardMap[key] && !keysPressed[key]) {
                    keysPressed[key] = true;

                    // Find matching piano key and get its frequency
                    const note = keyboardMap[key];
                    const frequency = NOTE_FREQUENCIES[note] || 0;

                    // Play the note
                    playNote(note, frequency);
                }
            });

            // Listen for key up events
            document.addEventListener("keyup", (event) => {
                const key = event.key.toLowerCase();

                // Clear the key press state
                if (keyboardMap[key]) {
                    keysPressed[key] = false;
                }
            });
        }
    });
</script>

<style>
    /* Fix for the missing dot in the selector */
    .piano-container {
        margin: 2rem 0;
        text-align: center;
        font-family: "Press Start 2P", "Courier New", monospace; /* Pixel font */
    }

    .piano {
        margin: 1.5rem auto;
        width: 100%;
        max-width: 600px;
        image-rendering: pixelated;
        image-rendering: crisp-edges;
        box-shadow: 0px 6px 0px #333;
        border: 2px solid #111;
        padding: 10px;
        background: #555;
        border-radius: 4px;
    }

    .keyboard {
        position: relative;
        display: flex;
        justify-content: center;
        height: 200px;
        width: 600px;
        margin: 0 auto;
        overflow-x: auto;
    }

    /* Pixelated white keys */
    .white-key {
        width: 50px;
        height: 200px;
        background-color: #ffffff;
        border: 2px solid #333;
        border-radius: 2px;
        box-sizing: border-box;
        display: flex;
        align-items: flex-end;
        justify-content: center;
        padding-bottom: 10px;
        cursor: pointer;
        z-index: 1;
        image-rendering: pixelated;
    }

    /* Replace the black key styles with solid backgrounds */
    .black-key {
        position: absolute;
        width: 30px;
        height: 120px;
        background-color: #111111;
        border: 2px solid #000;
        border-radius: 0;
        top: 0;
        z-index: 2;
        cursor: pointer;
        image-rendering: pixelated;
        box-shadow: inset 0px 0px 0px 2px rgba(255, 255, 255, 0.1);
    }

    /* Update hover states */
    .white-key:hover {
        background-color: #f0f0f0;
        border-color: #666;
    }

    .black-key:hover {
        background-color: #333333;
        box-shadow: inset 0px 0px 0px 2px rgba(255, 255, 255, 0.3);
        border-color: #444;
    }

    /* Updated white-key.active style - no transform */
    .white-key.active {
        background-color: #e0e0e0;
        border-color: #222;
        box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2); /* Add inset shadow instead of movement */
    }

    .black-key.active {
        background-color: #000000;
        box-shadow: none;
    }

    /* Update highlight states */
    .white-key.highlight {
        background-color: #ffffaa;
        border: 2px solid #ffd700 !important;
        box-shadow:
            0 0 8px #ffd700,
            inset 0 0 6px #ffd700 !important;
    }

    .black-key.highlight {
        background-color: #333311;
        border: 2px solid #ffd700 !important;
        box-shadow:
            0 0 8px #ffd700,
            inset 0 0 4px #ffd700 !important;
    }

    .key-label {
        font-family: "Press Start 2P", "Courier New", monospace;
        font-size: 10px;
        color: #000;
        margin-bottom: 5px;
        pointer-events: none;
        text-shadow: 1px 1px 0px #fff;
    }

    /* Retro style controls */
    .control-section {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 0.5rem;
        margin: 1.5rem auto;
        max-width: 600px;
        background: #333;
        padding: 10px;
        border: 2px solid #111;
        border-radius: 4px;
    }

    button {
        margin: 0.3rem;
        padding: 0.5rem;
        font-size: 0.8rem;
        font-family: "Press Start 2P", "Courier New", monospace;
        cursor: pointer;
        border: none;
        border-radius: 0;
        transition: all 0.1s ease;
        box-shadow:
            inset -2px -2px 0 #111,
            inset 2px 2px 0 #aaa;
        image-rendering: pixelated;
    }

    button:active {
        box-shadow:
            inset 2px 2px 0 #111,
            inset -2px -2px 0 #aaa;
        transform: translateY(2px);
    }

    .demo-button {
        background-color: #4477ff;
        color: white;
    }

    #record-button {
        background-color: #555;
        color: white;
    }

    .recording {
        background-color: #ff3333 !important;
        animation: pixelPulse 0.8s infinite steps(2);
    }

    @keyframes pixelPulse {
        0% {
            background-color: #ff3333;
        }
        50% {
            background-color: #aa0000;
        }
        100% {
            background-color: #ff3333;
        }
    }

    .sound-controls input[type="range"] {
        -webkit-appearance: none;
        height: 20px;
        background: #222;
        border: 2px solid #111;
        margin: 0 5px;
    }

    .sound-controls input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 10px;
        height: 20px;
        background: #ddd;
        border: 2px solid #333;
    }

    .sound-controls select {
        background: #222;
        color: #eee;
        border: 2px solid #111;
        font-family: "Press Start 2P", "Courier New", monospace;
        font-size: 10px;
        padding: 5px;
    }
</style>
